version: "3.8"
services:
  svelte-app:
    build:
      context: ./svelte-app
      dockerfile: Dockerfile
      target: prod
    ports:
      - "3000:80"
    depends_on:
      - api-service
    networks:
      - app-network

  api-service:
    build:
      context: ./api-service
      dockerfile: Dockerfile
      target: prod
    environment:
      - OAUTH_CLIENT_ID=social-client
      - OAUTH_CLIENT_SECRET=${OAUTH_SOCIAL_SECRET}
      - OAUTH_REDIRECT_URI=${ORIGIN_WEB}/callback
      - OAUTH_AUTH_URL=${ORIGIN_AUTH}/realms/social/protocol/openid-connect/auth
      - OAUTH_TOKEN_URL=${ORIGIN_AUTH}/realms/social/protocol/openid-connect/token
      - OAUTH_LOGOUT_URL=${ORIGIN_AUTH}/realms/social/protocol/openid-connect/logout
      - JWKS_URL=${ORIGIN_AUTH}/realms/social/protocol/openid-connect/certs
      - ALLOWED_ORIGIN=${ORIGIN_WEB}
      - PORT=4000
      - DATABASE_URL=postgresql://${PG_USER}:${PG_PASS}@postgres-social:5432/social
      - NODE_ID=100
      - MINIO_ENDPOINT=minio:9000
      - MINIO_ACCESS_KEY=${MINIO_USER}
      - MINIO_SECRET_KEY=${MINIO_PASS}
      - CDN_BASE_URL=${ORIGIN_MINIO}
    ports:
      - "4000:4000"
    depends_on:
      - keycloak
      - postgres-social
    networks:
      - app-network
    deploy:
      restart_policy:
        condition: on-failure
        max_attempts: 3

  keycloak:
    image: quay.io/keycloak/keycloak:latest
    environment:
      - KEYCLOAK_ADMIN=${KC_ADMIN_USER}
      - KEYCLOAK_ADMIN_PASSWORD=${KC_ADMIN_PASS}
      - KC_DB_URL=jdbc:postgresql://postgres-keycloak:5432/keycloak
      - KC_DB_USERNAME=${PG_KC_USER}
      - KC_DB_PASSWORD=${PG_KC_PASS}
      - KC_HOSTNAME=${KC_HOSTNAME}
      - KC_PROXY=edge
      - KC_HTTP_ENABLED=true
      - KC_HTTP_PORT=8080
    ports:
      - "8080:8080"
    volumes:
      - ./keycloak/prod:/opt/keycloak/data/import
    command:
      - start
      - --db=postgres
      - --import-realm
    depends_on:
      postgres-keycloak:
        condition: service_healthy
    networks:
      - app-network
    deploy:
      restart_policy:
        condition: on-failure
        max_attempts: 3

  postgres-social:
    image: postgres:13
    environment:
      POSTGRES_DB: social
      POSTGRES_USER: ${PG_USER}
      POSTGRES_PASSWORD: ${PG_PASS}
    volumes:
      - postgres_social_data:/var/lib/postgresql/data
    networks:
      - app-network
    deploy:
      restart_policy:
        condition: on-failure
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${PG_USER} -d social"]
      interval: 10s
      timeout: 5s
      retries: 5

  postgres-keycloak:
    image: postgres:13
    environment:
      POSTGRES_DB: keycloak
      POSTGRES_USER: ${PG_KC_USER}
      POSTGRES_PASSWORD: ${PG_KC_PASS}
    volumes:
      - postgres_keycloak_data:/var/lib/postgresql/data
    networks:
      - app-network
    deploy:
      restart_policy:
        condition: on-failure
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${PG_KC_USER} -d keycloak"]
      interval: 10s
      timeout: 5s
      retries: 5

  minio:
    image: minio/minio
    ports:
      - "9000:9000"
      - "9001:9001"
    volumes:
      - minio_data:/data
    networks:
      - app-network
    environment:
      - MINIO_ROOT_USER=${MINIO_USER}
      - MINIO_ROOT_PASSWORD=${MINIO_PASS}
    command: server /data --console-address ":9001"
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:9000/minio/health/live"]
      interval: 30s
      timeout: 20s
      retries: 3

  minio-setup:
    image: minio/mc
    depends_on:
      minio:
        condition: service_healthy
    profiles:
      - setup
    networks:
      - app-network
    entrypoint: >
      /bin/sh -c "
      /usr/bin/mc alias set social http://minio:9000 ${MINIO_USER} ${MINIO_PASS};
      /usr/bin/mc mb social/profiles --ignore-existing; 
      /usr/bin/mc mb social/media --ignore-existing;
      /usr/bin/mc anonymous set download social/profiles;
      /usr/bin/mc anonymous set download social/media;
      exit 0;
      "

networks:
  app-network:
    driver: bridge

volumes:
  postgres_social_data:
  postgres_keycloak_data:
  minio_data:
